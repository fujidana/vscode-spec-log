$schema: https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: spec Log
scopeName: source.spec-log
patterns:
  - include: "#prompt-line"
  # - include: "#scan-table"
  - include: "#literal-numeric"
  - include: "#literal-string"
repository:
  prompt-line:
    match: ^(([0-9]+)(\.)([A-Za-z][A-Za-z0-9]*)(>)\s?)((.*))$
    name: meta.prompt.spec-log
    captures:
      "1": { name: meta.prompt.spec-log }
      "2": { name: constant.numeric.integer.decimal.spec-log }
      "3": { name: punctuation.separator.dot.spec-log }
      "4": { name: variable.other.spec-log }
      "5": { name: punctuation.separator.gt.spec-log }
      "6": { name: markup.bold.spec-log }
      "7": { name: string.interpolated.spec-log }
      # "6": { name: meta.embedded.line.spec-command, patterns: [{ include: "source.spec-command" }] }    

    # When one wants to colorize the command-part using spec-command rule, comment out the 
    # 'match' patterns above and uncomment the following 'begin'/'end' patterns.

    # # In the following rule, 'beginCapture' patterns capture just before the end of line
    # # and thus, the main part (remaining string between 'begin' and 'end') is always empty.
    # # This is intentional.
    # # Trying to capture command parts in the 'patterns' of 'begin'/'end' rule
    # # has a potential risk such that the failure of syntax parsing due to a single quatation
    # # mark is spread over multiple lines.
    # begin: ^(([0-9]+)(\.)([A-Za-z][A-Za-z0-9]*)(>)\s?)(.*)$
    # beginCaptures:
    #   "1": { name: meta.prompt.spec-log }
    #   "2": { name: constant.numeric.integer.decimal.spec-log }
    #   "3": { name: punctuation.separator.dot.spec-log }
    #   "4": { name: variable.other.spec-log }
    #   "5": { name: punctuation.separator.gt.spec-log }
    #   "6": { name: meta.embedded.line.spec-command, patterns: [{ include: "source.spec-command" }] }    
    # end: "$"
    # # Since 'beginCapture' consumes all characters in a line, the following 'patterns'
    # # match nothing. Even though, 'patterns' must not be commented out.
    # # If commented out, (I don't know the reason but) the command part is not colorized.
    # # When 'match' syntax is usted instead of 'begin'/'end' syntax, colorizing does not function.
    # patterns: [{ include: "source.spec-command" }]

  # scan-table:
  #   begin: ^  (\#) (( (.{7}\S\b))+  ( (.{7}\S\b))+) $
  #   beginCaptures:
  #     "0": { name: meta.scan.table.header.spec-log }
  #     "1": { name: keyword.other.scan-number.spec-log }
  #     "2": { patterns: [{ include: "#long-names-only" }] }
  #   end: ^$
  #   name: meta.scan.table.spec-log
  #   patterns: [{ include: "#literal-numeric" }]
  # long-names-only:
  #   patterns:
  #     - match: \s+
  #     - include: "#long-name"
  # long-name:
  #   patterns:
  #     - match: \b(.*\S)\b
  #       name: entity.name.tag.spec-log
  #       captures:
  #         "1": { name: entity.name.tag.spec-log }
  literal-numeric:
    patterns:
      - match: (?<!\S)[+-]?(0|[1-9][0-9]*)(?!\S)
        name: constant.numeric.integer.decimal.spec-log
      - match: (?<!\S)[+-]?[0-9]+(?:\.[0-9]*)?(?:(e|E)[+-]?[0-9]+)?(?!\S)
        name: constant.numeric.float.spec-log
        # captures:
        #   "1": { name: keyword.other.float.scientific-notation.spec-log }
      - match: (?<!\S)[+-]?\.[0-9]+(?:(e|E)[+-]?[0-9]+)?(?!\S)
        name: constant.numeric.float.spec-log
        # captures:
        #   "1": { name: keyword.other.float.scientific-notation.spec-log }
  literal-string:
    patterns:
      - begin: '"'
        beginCaptures:
          "0": { name: punctuation.definition.string.begin.spec-log }
        end: '"|$'
        endCaptures:
          "0": { name: punctuation.definition.string.end.spec-log }
        name: string.quoted.double.spec-log
        patterns:
          - match: \\.
            name: constant.character.escape.spec-log
